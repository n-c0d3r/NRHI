#pragma once

/** @file nrhi/command_allocator_base.hpp
*
*   Implement command allocator base class.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_WORK_SUBMISSION
#include <nrhi/device_child.hpp>
#include <nrhi/command_list_type.hpp>
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_WORK_SUBMISSION

#pragma endregion



#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_WORK_SUBMISSION
namespace nrhi {

	class A_device;



	struct F_command_allocator_desc {

		ED_command_list_type type = ED_command_list_type::DIRECT;

	};



	class NRHI_API A_command_allocator : public A_device_child {

	private:
		F_command_allocator_desc desc_;
		b8 supports_graphics_ = false;
		b8 supports_compute_ = false;
		b8 supports_blit_ = false;

	public:
		NCPP_FORCE_INLINE const F_command_allocator_desc& desc() const noexcept { return desc_; }
		NCPP_FORCE_INLINE b8 supports_graphics() const noexcept { return supports_graphics_; }
		NCPP_FORCE_INLINE b8 supports_compute() const noexcept { return supports_compute_; }
		NCPP_FORCE_INLINE b8 supports_blit() const noexcept { return supports_blit_; }



	protected:
		A_command_allocator(TKPA_valid<A_device> device_p, const F_command_allocator_desc& desc);

	public:
		virtual ~A_command_allocator();

	public:
		NCPP_OBJECT(A_command_allocator);

	public:
		void reset();

	};

}
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_WORK_SUBMISSION