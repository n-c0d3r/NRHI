#pragma once

/** @file nrhi/descriptor.hpp
*
*   Implement descriptor.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/descriptor_range_type.hpp>
#include <nrhi/descriptor_heap_type.hpp>

#pragma endregion



namespace nrhi {

    class A_device;
    class A_descriptor_heap;



    struct F_descriptor_range_desc {

        ED_descriptor_range_type type;

        u32 base_register = 0;
        u32 register_space = 0;

    };

    struct F_descriptor_table_desc {

        TG_span<F_descriptor_range_desc> range_descs;

    };



    struct F_descriptor_heap_desc {

        ED_descriptor_heap_type type;

    };



    class NRHI_API A_descriptor_heap {

    private:
        TK_valid<A_device> device_p_;
        F_descriptor_heap_desc desc_;

    public:
        NCPP_FORCE_INLINE TK_valid<A_device> device_p() noexcept { return device_p_; }
        NCPP_FORCE_INLINE const F_descriptor_heap_desc& desc() const noexcept { return desc_; }



    protected:
        A_descriptor_heap(TK_valid<A_device> device_p, const F_descriptor_heap_desc& desc);

    public:
        virtual ~A_descriptor_heap();

    };

}
