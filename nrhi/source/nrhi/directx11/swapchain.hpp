#pragma once

/** @file nrhi/directx11/swapchain.hpp
*
*   Implement directx11 swapchain.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/swapchain_base.hpp>
#include <nrhi/texture.hpp>
#include <nrhi/resource_view_base.hpp>
#include <nrhi/resource_view_handle.hpp>

#pragma endregion



namespace nrhi {

    class A_command_queue;
    class A_command_list;
    class A_resource;
    class A_resource_view;



    class NRHI_API F_directx11_swapchain : public A_swapchain {

	public:
		friend class HD_directx11_swapchain;



    private:
        IDXGISwapChain* dxgi_swapchain_p_ = 0;
        typename F_event::F_listener_handle surface_resize_handle_;

		U_texture_2d_handle buffer_p_;
		U_rtv_handle back_rtv_p_;

    public:
        NCPP_FORCE_INLINE IDXGISwapChain* dxgi_swapchain_p() noexcept { return dxgi_swapchain_p_; }
		NCPP_FORCE_INLINE void set_dxgi_swapchain_p_unsafe(IDXGISwapChain* value) noexcept { dxgi_swapchain_p_ = value; }

#ifdef NRHI_ENABLE_DRIVER_DEBUGGER
        virtual void set_debug_name(const F_debug_name& value) override;
#endif



    public:
        F_directx11_swapchain(
            TKPA_valid<A_command_queue> command_queue_p,
            TKPA_valid<F_surface> surface_p,
            const F_swapchain_desc& desc
        );
        ~F_directx11_swapchain();

    private:
        void update_d3d11_object_for_buffer_rtv();

    };



    class NRHI_API HD_directx11_swapchain {

    public:
        static TU<A_swapchain> create(
            TKPA_valid<A_command_queue> command_queue_p,
            TKPA_valid<F_surface> surface_p,
            const F_swapchain_desc& desc
        );

	public:
		static K_valid_rtv_handle back_rtv_p(TKPA_valid<A_swapchain>);
		static K_valid_texture_2d_handle back_buffer_p(TKPA_valid<A_swapchain>);

	public:
		static void present(TKPA_valid<A_swapchain>);

	};

}
