#pragma once

/** @file nrhi/directx12/resource.hpp
*
*   Implement directx12 resource.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/descriptor_base.hpp>
#include <nrhi/descriptor_heap_base.hpp>
#include <nrhi/resource_view_base.hpp>
#include <nrhi/sampler_state_base.hpp>

#pragma endregion



namespace nrhi {

	class A_device;



	class NRHI_API HD_directx12_descriptor {

	public:
		static void initialize_resource_view(
			TKPA_valid<A_descriptor_heap> heap_p,
			F_descriptor_cpu_address cpu_address,
			const F_resource_view_desc& desc
		);

	public:
		static void initialize_srv(
			TKPA_valid<A_descriptor_heap> heap_p,
			F_descriptor_cpu_address cpu_address,
			const F_resource_view_desc& desc
		);
		static void initialize_uav(
			TKPA_valid<A_descriptor_heap> heap_p,
			F_descriptor_cpu_address cpu_address,
			const F_resource_view_desc& desc
		);
		static void initialize_rtv(
			TKPA_valid<A_descriptor_heap> heap_p,
			F_descriptor_cpu_address cpu_address,
			const F_resource_view_desc& desc
		);
		static void initialize_dsv(
			TKPA_valid<A_descriptor_heap> heap_p,
			F_descriptor_cpu_address cpu_address,
			const F_resource_view_desc& desc
		);

	public:
		static void initialize_sampler_state(
			TKPA_valid<A_descriptor_heap> heap_p,
			F_descriptor_cpu_address cpu_address,
			const F_sampler_state_desc& desc
		);

	public:
		static void copy_descriptor_ranges(
			TKPA_valid<A_device> device_p,
			TG_span<F_descriptor_cpu_address> dest_cpu_addresses,
			TG_span<F_descriptor_cpu_address> src_cpu_addresses,
			TG_span<u32> descriptor_counts,
			u32 range_count,
			ED_descriptor_heap_type heap_type
		);
		static void copy_descriptors(
			TKPA_valid<A_device> device_p,
			F_descriptor_cpu_address dest_cpu_address,
			F_descriptor_cpu_address src_cpu_address,
			u32 descriptor_count,
			ED_descriptor_heap_type heap_type
		);

	};

}
