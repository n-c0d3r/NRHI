#pragma once

/** @file nrhi/directx12/fence.hpp
*
*   Implement directx12 fence.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/fence_base.hpp>

#pragma endregion



namespace nrhi {

	class A_device;



	class NRHI_API F_directx12_fence : public A_fence {

	public:
		friend class HD_directx12_fence;



	private:
		ID3D12Fence* d3d12_fence_p_ = 0;

	public:
		NCPP_FORCE_INLINE ID3D12Fence* d3d12_fence_p() noexcept { return d3d12_fence_p_; }
		NCPP_FORCE_INLINE void set_d3d12_fence_p_unsafe(ID3D12Fence* value) noexcept { d3d12_fence_p_ = value; }

#ifdef NRHI_ENABLE_DRIVER_DEBUGGER
		virtual void set_debug_name(const F_debug_name& value) override;
#endif



	public:
		F_directx12_fence(
			TKPA_valid<A_device> device_p,
			const F_fence_desc& desc
		);
		~F_directx12_fence();

	};



	class NRHI_API HD_directx12_fence {

	public:
		static TU<A_fence> create(
			TKPA_valid<A_device> device_p,
			const F_fence_desc& desc
		);



	public:
		static u64 value(TKPA_valid<A_fence>);
		static void wait(TKPA_valid<A_fence>, u64 target_value);
		static b8 is_completed(TKPA_valid<A_fence>, u64 target_value);

	};

}
