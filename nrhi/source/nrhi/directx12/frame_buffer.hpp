#pragma once

/** @file nrhi/directx12/frame_buffer.hpp
*
*   Implement directx12 frame_buffer.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/frame_buffer_base.hpp>

#pragma endregion



namespace nrhi {

	class A_device;



	class NRHI_API F_directx12_frame_buffer : public A_frame_buffer {

	public:
		friend class HD_directx12_frame_buffer;



	private:
		D3D12_VIEWPORT d3d12_viewport_;
		D3D12_RECT d3d12_scissor_rect_;

	public:
		NCPP_FORCE_INLINE const D3D12_VIEWPORT& d3d12_viewport() const noexcept { return d3d12_viewport_; }
		NCPP_FORCE_INLINE const D3D12_RECT& d3d12_scissor_rect() const noexcept { return d3d12_scissor_rect_; }



	public:
		F_directx12_frame_buffer(
			TKPA_valid<A_device> device_p,
			const F_frame_buffer_desc& desc
		);
		virtual ~F_directx12_frame_buffer();

	public:
		void update_d3d12_viewport();

	public:
		virtual void rebuild() override;

	public:
		virtual void release_driver_specific_implementation() override;

	};



	class NRHI_API HD_directx12_frame_buffer {

	public:
		static TU<A_frame_buffer> create(
			TKPA_valid<A_device> device_p,
			const F_frame_buffer_desc& desc
		);

	public:
		static void update_viewport(TK_valid<A_frame_buffer> frame_bufer_p);

	};

}
