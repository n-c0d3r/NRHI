#pragma once

/** @file nrhi/directx12/pix_runtime.hpp
*
*   Implement directx12 pix runtime.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

#pragma endregion



#ifdef NRHI_ENABLE_DRIVER_DEBUGGER
namespace nrhi {

    typedef void(WINAPI* F_pix_begin_event_on_command_list)(ID3D12GraphicsCommandList* commandList, UINT64 color, _In_ PCSTR formatString);
    typedef void(WINAPI* F_pix_end_event_on_command_list)(ID3D12GraphicsCommandList* commandList);
    typedef void(WINAPI* F_pix_set_marker_on_command_list)(ID3D12GraphicsCommandList* commandList, UINT64 color, _In_ PCSTR formatString);

    class NRHI_API HD_directx12_pix_runtime {

    public:
        friend class HD_directx12_system;



    private:
        static HMODULE module_handle_;
        static F_pix_begin_event_on_command_list begin_event_on_command_list_;
        static F_pix_end_event_on_command_list end_event_on_command_list_;
        static F_pix_set_marker_on_command_list set_marker_on_command_list_;

    public:
        static NCPP_FORCE_INLINE HMODULE module_handle() { return module_handle_; }
        static NCPP_FORCE_INLINE F_pix_begin_event_on_command_list begin_event_on_command_list() { return begin_event_on_command_list_; }
        static NCPP_FORCE_INLINE F_pix_end_event_on_command_list end_event_on_command_list() { return end_event_on_command_list_; }
        static NCPP_FORCE_INLINE F_pix_set_marker_on_command_list set_marker_on_command_list() { return set_marker_on_command_list_; }

        static NCPP_FORCE_INLINE UINT32 to_pix_color(UINT8 r, UINT8 g, UINT8 b)
        {
            return 0xff000000u | ((UINT32)r << 16) | ((UINT32)g << 8) | (UINT32)b;
        }
        static NCPP_FORCE_INLINE UINT32 to_pix_color(PA_vector3_f32 color)
        {
		    F_vector3_u32 color_times_255_u32 = color * 255.0f;

            return to_pix_color(
                eastl::min<u32>(color_times_255_u32.x, 0xFF),
                eastl::min<u32>(color_times_255_u32.y, 0xFF),
                eastl::min<u32>(color_times_255_u32.z, 0xFF)
            );
        }



    private:
        static void initialize();
        static void release();
    };
}
#endif