#pragma once

/** @file nrhi/nsl_shader_compiler.hpp
*
*   Implement nsl shader compiler.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/shader_compiler_base.hpp>
#include <nrhi/shader_class_base.hpp>

#pragma endregion



namespace nrhi {

	class A_shader;
	class A_shader_class;



	struct F_nsl_include_blob {

	};



	class NRHI_API H_nsl_utilities {

	public:
		struct NRHI_API F_search_state {

			b8 is_variable_name_character = false;

			b8 is_open_parentheses = false;
			b8 is_close_parentheses = false;
			i32 parentheses_level = 0;

			b8 is_star = false;
			b8 is_forwardslash = false;

			b8 is_space = false;

			b8 is_in_str_1 = false; // for ' string
			b8 is_in_str_2 = false; // for " string
			b8 is_in_str = false;
			b8 is_in_comment_1 = false; // for single line comment
			b8 is_in_comment_2 = false; // for multiple line comment
			b8 is_in_comment = false;

			char char8 = ' ';

		public:
			void update(const F_search_state& prev_state, char new_character);

		};



	public:
		static G_string apply_variable_like_macro(
			const G_string& src_content,
			const G_string& macro_name,
			const G_string& macro_result
		);

	public:
		static G_string apply_function_like_macro(
			const G_string& src_content,
			const G_string& macro_name,
			const eastl::function<G_string(const G_string&)>& macro_result_functor
		);

	public:
		static G_string clear_space_head_tail(const G_string& src_content);
		static G_string clear_space_head(const G_string& src_content);
		static G_string clear_space_tail(const G_string& src_content);

	};



	class NRHI_API F_nsl_shader_compiler {

	public:
		F_nsl_shader_compiler();
		~F_nsl_shader_compiler();

	public:
		NCPP_DISABLE_COPY(F_nsl_shader_compiler);

	protected:
		virtual eastl::optional<F_nsl_include_blob> load_include_blob(
			const G_string& path,
			const TG_span<F_shader_kernel_desc>& kernel_descs,
			u32 kernel_index
		);
		virtual G_string process_source(
			const G_string& src_content,
			const G_string& abs_path,
			const TG_span<F_shader_kernel_desc>& kernel_descs,
			u32 kernel_index
		);

	private:
		TU<A_shader_blob> compile_processed_source(
			const G_string& processed_src_content,
			const G_string& abs_path,
			const TG_span<F_shader_kernel_desc>& kernel_descs,
			u32 kernel_index
		);
		TU<A_shader_blob> compile_source(
			const G_string& src_content,
			const G_string& abs_path,
			const TG_span<F_shader_kernel_desc>& kernel_descs,
			u32 kernel_index
		);

	public:
		TU<A_shader_class> compile(
			const G_string& src_content,
			const G_string& abs_path,
			const TG_span<F_shader_kernel_desc>& kernel_descs
		);

	};

}
