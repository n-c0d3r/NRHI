#pragma once

/** @file nrhi/sampler_state_base.hpp
*
*   Implement sampler state base.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/device_child.hpp>
#include <nrhi/sampler_state_desc.hpp>

#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING
#include <nrhi/descriptor_base.hpp>
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING

#pragma endregion



namespace nrhi {

	class A_device;



	class NRHI_API A_sampler_state : public A_device_child {

	private:
		F_sampler_state_desc desc_;

	protected:
#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING
		F_descriptor descriptor_;
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING

	public:
		NCPP_FORCE_INLINE const F_sampler_state_desc& desc() const noexcept { return desc_; }

#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING
		NCPP_FORCE_INLINE const F_descriptor& descriptor() const noexcept {

			return descriptor_;
		}
		NCPP_FORCE_INLINE void set_descriptor_unsafe(const auto& value) noexcept {

			descriptor_ = value;
		}
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING



	protected:
		A_sampler_state(
			TKPA_valid<A_device> device_p,
			const F_sampler_state_desc& desc
		);
#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING
		A_sampler_state(
			TKPA_valid<A_device> device_p,
			const F_sampler_state_desc& desc,
			const F_descriptor& descriptor
		);
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING

	public:
		virtual ~A_sampler_state();

	public:
		NCPP_OBJECT(A_sampler_state);

	public:
		virtual void rebuild(
			const F_sampler_state_desc& desc
		);
#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING
		virtual void rebuild(
			const F_sampler_state_desc& desc,
			const F_descriptor& descriptor
		);
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING

	protected:
		void finalize_rebuild(
			const F_sampler_state_desc& desc
		);
#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING
		void finalize_rebuild(
			const F_sampler_state_desc& desc,
			const F_descriptor& descriptor
		);
#endif // NRHI_DRIVER_SUPPORT_ADVANCED_RESOURCE_BINDING

	public:
		virtual void release_driver_specific_implementation();
	};

}
