#pragma once

/** @file nrhi/swapchain_base.hpp
*
*   Implement swapchain base class.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/format.hpp>
#include <nrhi/sample_desc.hpp>
#include <nrhi/resource_base.hpp>
#include <nrhi/resource_view_base.hpp>
#include <nrhi/texture.hpp>

#pragma endregion



namespace nrhi {

    class A_command_queue;



    struct F_swapchain_desc {
        ED_format format = ED_format::R8G8B8A8_UNORM;
        F_sample_desc sample_desc;
		u32 back_rtv_count = 1;
    };



    class NRHI_API A_swapchain {

    private:
        TK_valid<A_command_queue> command_queue_p_;
        TK_valid<F_surface> surface_p_;
        F_swapchain_desc desc_;

    protected:
		TG_vector<U_rtv_handle> back_rtv_p_vector_;

    public:
        NCPP_FORCE_INLINE TK_valid<A_command_queue> command_queue_p() noexcept { return command_queue_p_; }
        NCPP_FORCE_INLINE TK_valid<F_surface> surface_p() noexcept { return surface_p_; }
        NCPP_FORCE_INLINE const F_swapchain_desc& desc() const noexcept { return desc_; }

        NCPP_FORCE_INLINE const auto& back_rtv_p_vector() const noexcept { return back_rtv_p_vector_; }

        u8 current_back_rtv_index() const noexcept;

        NCPP_FORCE_INLINE K_valid_rtv_handle back_rtv_p(u8 index = 0xFF) const noexcept {

			if(index == 0xFF)
				index = current_back_rtv_index();

            return NCPP_FOH_VALID(back_rtv_p_vector_[index]);
        }



    protected:
        A_swapchain(
            TKPA_valid<A_command_queue> command_queue_p,
            TKPA_valid<F_surface> surface_p,
            const F_swapchain_desc& desc
        );

    public:
        virtual ~A_swapchain();

	public:
		NCPP_OBJECT(A_swapchain);



	public:
#ifdef NRHI_DRIVER_SUPPORT_SIMPLE_WORK_SUBMISSION
		void present();
#endif

#ifdef NRHI_DRIVER_SUPPORT_ADVANCED_WORK_SUBMISSION
		void ASYNC_present();
#endif

    };

}
