#pragma once

/** @file nrhi/texture_handle.external_use_only.inl
*
*   Implement texture handle inline functions that is only used by external.
*/



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



#pragma region Includes

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/prerequisites.hpp>

////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////

#include <nrhi/texture.hpp>
#include <nrhi/texture_handle.hpp>
#include <nrhi/resource_view.hpp>
#include <nrhi/resource.hpp>

#pragma endregion



namespace nrhi {

	NCPP_FHANDLE_TEMPLATE_DEFINE_MEMBER(A_resource)
	NCPP_FORCE_INLINE U_srv_handle TF_texture_2d_array_handle<F_oref__>::create_sub_array_srv(u32 index, u32 count, u32 base_mip_level) const noexcept {

		return H_resource_view::create_srv(
			oref->device_p(),
			{
				.overrided_resource_type = E_resource_type::TEXTURE_2D_ARRAY,
				.resource_p = NCPP_FOH_VALID(oref),
				.base_mip_level = base_mip_level,
				.index = index,
				.count = count
			}
		);
	}
	NCPP_FHANDLE_TEMPLATE_DEFINE_MEMBER(A_resource)
	NCPP_FORCE_INLINE U_uav_handle TF_texture_2d_array_handle<F_oref__>::create_sub_array_uav(u32 index, u32 count, u32 base_mip_level) const noexcept {

		return H_resource_view::create_srv(
			oref->device_p(),
			{
				.overrided_resource_type = E_resource_type::TEXTURE_2D_ARRAY,
				.resource_p = NCPP_FOH_VALID(oref),
				.base_mip_level = base_mip_level,
				.index = index,
				.count = count
			}
		);
	}
	NCPP_FHANDLE_TEMPLATE_DEFINE_MEMBER(A_resource)
	NCPP_FORCE_INLINE U_rtv_handle TF_texture_2d_array_handle<F_oref__>::create_element_rtv(u32 index, u32 target_mip_level) const noexcept {

		return H_resource_view::create_srv(
			oref->device_p(),
			{
				.overrided_resource_type = E_resource_type::TEXTURE_2D_ARRAY,
				.resource_p = NCPP_FOH_VALID(oref),
				.target_mip_level = target_mip_level,
				.index = index,
				.count = 1
			}
		);
	}

	NCPP_FHANDLE_TEMPLATE_DEFINE_MEMBER(A_resource)
	NCPP_FORCE_INLINE U_srv_handle TF_texture_cube_handle<F_oref__>::create_face_srv(E_texture_cube_face face, u32 base_mip_level) const noexcept {

		return H_resource_view::create_srv(
			oref->device_p(),
			{
				.overrided_resource_type = E_resource_type::TEXTURE_CUBE,
				.resource_p = NCPP_FOH_VALID(oref),
				.base_mip_level = base_mip_level,
				.index = (u32)D3D11_TEXTURECUBE_FACE(face),
				.count = 1
			}
		);
	}
	NCPP_FHANDLE_TEMPLATE_DEFINE_MEMBER(A_resource)
	NCPP_FORCE_INLINE U_uav_handle TF_texture_cube_handle<F_oref__>::create_face_uav(E_texture_cube_face face, u32 base_mip_level) const noexcept {

		return H_resource_view::create_uav(
			oref->device_p(),
			{
				.overrided_resource_type = E_resource_type::TEXTURE_2D_ARRAY,
				.resource_p = NCPP_FOH_VALID(oref),
				.base_mip_level = base_mip_level,
				.index = (u32)D3D11_TEXTURECUBE_FACE(face),
				.count = 1
			}
		);
	}
	NCPP_FHANDLE_TEMPLATE_DEFINE_MEMBER(A_resource)
	NCPP_FORCE_INLINE U_rtv_handle TF_texture_cube_handle<F_oref__>::create_face_rtv(E_texture_cube_face face, u32 base_mip_level) const noexcept {

		return H_resource_view::create_rtv(
			oref->device_p(),
			{
				.overrided_resource_type = E_resource_type::TEXTURE_2D_ARRAY,
				.resource_p = NCPP_FOH_VALID(oref),
				.base_mip_level = base_mip_level,
				.index = (u32)D3D11_TEXTURECUBE_FACE(face),
				.count = 1
			}
		);
	}

}
